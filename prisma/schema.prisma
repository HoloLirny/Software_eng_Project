generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int             @id @default(autoincrement())
  name    String?
  email     String          @unique(map: "User_email_key")
  password  String?
  image     String?
  user_role user_user_role? @default(TEACHER)
  user_courses user_course[]
  uploaded_files file[]
  sessions  session[]
  emailVerified DateTime?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model session {
  id           Int      @id @default(autoincrement())
  user_id      Int
  session_token String   @unique
  expires      DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model user_course {
  id        Int   @id @default(autoincrement())
  user_id   Int
  course_id String
  user      user   @relation(fields: [user_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  course    course @relation(fields: [course_id], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@index([user_id])
  @@index([course_id])
}

model student {
  id              String              @id
  faculty         String           @db.VarChar(255)
  student_name    String           @db.VarChar(255)
  attendances     attendance[]
  course_students course_student[]
}

model course_student {
  id         Int     @id @default(autoincrement())
  course_id  String
  student_id String
  course     course  @relation(fields: [course_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  student    student @relation(fields: [student_id], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@index([course_id])
  @@index([student_id])
}

model course {
  id              String              @id
  course_name     String           @db.VarChar(255)
  teacher_id      Int
  total_student   Int?
  scan_time       Int?
  attendances     attendance[]
  user_courses    user_course[]
  course_students course_student[]
  files           file[]
}

model file {
  id        Int      @id @default(autoincrement())
  course_id String
  uploaded_by Int
  file_name String   @db.VarChar(255)
  file_url  String   @db.VarChar(255)
  uploaded_at DateTime @default(now())
  
  course    course   @relation(fields: [course_id], references: [id], onDelete: Cascade,onUpdate: Cascade) 
  teacher     user     @relation(fields: [uploaded_by], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@index([course_id])
  @@index([uploaded_by])
}


model attendance {
  id         Int               @id @default(autoincrement())
  student_id String
  course_id  String
  date       DateTime?
  time       DateTime?
  status     attendance_status @default(PRESENT)
  course     course            @relation(fields: [course_id], references: [id], onDelete: Cascade,onUpdate: Cascade)
  student    student           @relation(fields: [student_id], references: [id], onDelete: Cascade,onUpdate: Cascade)

  @@index([course_id])
  @@index([student_id])
}

enum attendance_status {
  PRESENT
  ABSENT
  LATE
}

enum user_user_role {
  ADMIN
  TEACHER
  TA
}
