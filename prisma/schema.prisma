generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int             @id @default(autoincrement())
  email          String          @unique(map: "User_email_key")
  password       String?
  user_role      user_user_role? @default(TEACHER)
  uploaded_files file[]
  user_courses   user_course[]
  attendance     attendance[]
}

model user_course {
  id        Int    @id @default(autoincrement())
  user_id   Int
  course_id String
  course    course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  user      user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([course_id])
}

model student {
  student_name    String           @db.VarChar(255)
  student_id      String           @unique
  student_email   String           @unique
  section_lec     String?
  section_lab     String?
  id              Int              @id @default(autoincrement())
  attendances     attendance[]
  student_course student_course[]
}

model student_course {
  id          Int      @id @default(autoincrement())
  student_id  String
  course_id   String
  student     student  @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  course      course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade)

  @@index([student_id])
  @@index([course_id])

  @@unique([student_id, course_id]) 
}

model course {
  course_name     String           @db.VarChar(255)
  scan_time       Int?
  teacher_id      Int
  course_id       String           @unique
  id              Int              @id @default(autoincrement())
  attendances     attendance[]
  files           file[]
  user_courses    user_course[]
  student_course student_course[]
  attendance_detail attendance_detail[]
}

model file {
  id          Int      @id @default(autoincrement())
  course_id   String
  file_name   String   @db.VarChar(255)
  file_url    String   @db.VarChar(255)
  uploaded_by Int
  upload_at   DateTime @default(now())
  course      course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  teacher     user     @relation(fields: [uploaded_by], references: [id], onDelete: Cascade)

  @@index([course_id])
  @@index([uploaded_by])
}

model attendance {
  id          Int       @id @default(autoincrement())
  student_id  String
  course_id   String
  section_lec String
  section_lab String
  user_id     Int
  detail_id   Int
  user       user       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course     course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  student    student   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
  attendance_detail    attendance_detail  @relation(fields: [detail_id], references: [id], onDelete: Cascade) 

  @@index([course_id])
  @@index([student_id])
}

model attendance_detail{
  id          Int       @id @default(autoincrement())
  date        String?   @unique
  course_id   String    
  description String?
  course      course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  attendance attendance[]
}

enum user_user_role {
  ADMIN
  TEACHER
  TA
  STUDENT
}
